// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// リサイン(退会)
	// (DELETE /v1/auth)
	V1AuthResign(ctx echo.Context) error
	// パスワード更新
	// (PUT /v1/auth/password)
	V1AuthChangePassword(ctx echo.Context) error
	// リフレッシュ
	// (POST /v1/auth/refresh)
	V1AuthRefresh(ctx echo.Context) error
	// サインイン
	// (POST /v1/auth/signin)
	V1AuthSignIn(ctx echo.Context) error
	// サインアウト
	// (GET /v1/auth/signout)
	V1AuthSignOut(ctx echo.Context) error
	// サインアップ
	// (POST /v1/auth/signup)
	V1AuthSignUp(ctx echo.Context) error
	// 検証
	// (GET /v1/auth/verify)
	V1AuthVerify(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// V1AuthResign converts echo context to params.
func (w *ServerInterfaceWrapper) V1AuthResign(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V1AuthResign(ctx)
	return err
}

// V1AuthChangePassword converts echo context to params.
func (w *ServerInterfaceWrapper) V1AuthChangePassword(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V1AuthChangePassword(ctx)
	return err
}

// V1AuthRefresh converts echo context to params.
func (w *ServerInterfaceWrapper) V1AuthRefresh(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V1AuthRefresh(ctx)
	return err
}

// V1AuthSignIn converts echo context to params.
func (w *ServerInterfaceWrapper) V1AuthSignIn(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V1AuthSignIn(ctx)
	return err
}

// V1AuthSignOut converts echo context to params.
func (w *ServerInterfaceWrapper) V1AuthSignOut(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V1AuthSignOut(ctx)
	return err
}

// V1AuthSignUp converts echo context to params.
func (w *ServerInterfaceWrapper) V1AuthSignUp(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V1AuthSignUp(ctx)
	return err
}

// V1AuthVerify converts echo context to params.
func (w *ServerInterfaceWrapper) V1AuthVerify(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V1AuthVerify(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v1/auth", wrapper.V1AuthResign)
	router.PUT(baseURL+"/v1/auth/password", wrapper.V1AuthChangePassword)
	router.POST(baseURL+"/v1/auth/refresh", wrapper.V1AuthRefresh)
	router.POST(baseURL+"/v1/auth/signin", wrapper.V1AuthSignIn)
	router.GET(baseURL+"/v1/auth/signout", wrapper.V1AuthSignOut)
	router.POST(baseURL+"/v1/auth/signup", wrapper.V1AuthSignUp)
	router.GET(baseURL+"/v1/auth/verify", wrapper.V1AuthVerify)

}
